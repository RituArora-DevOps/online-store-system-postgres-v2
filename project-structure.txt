Project Structure Overview - JavaFX + Spring Boot
online_store_system
┣ controller // Accept user input and handles UI or API logic
┃ ┣ ProductController.java
┃ ┣ CartController.java
┃ ┣ PaymentController.java
┃ ┣ OrderController.java
┃ ┗ ReviewController.java
┣ model/entity // Contains business/domain data classes
┃ ┣ Product.java (abstract)
┃ ┣ Electronics.java
┃ ┣ Clothing.java
┃ ┣ Grocery.java
┃ ┣ ShoppingCart.java
┃ ┣ Payment.java
┃ ┣ OrderHistory.java
┃ ┗ ProductReview.java
┣ repository // Data access layer interfaces and implementations (connects to DB)
┃ ┣ ProductRepository.java
┃ ┣ OrderRepository.java
┃ ┣ PaymentRepository.java
┃ ┗ ReviewRepository.java
┣ service // Core business logic layer
┃ ┣ ProductService.java
┃ ┣ CartService.java
┃ ┣ PaymentService.java
┃ ┣ OrderService.java
┃ ┗ ReviewService.java
┣ ui // JavaFX front-end layout and controller files
┃ ┣ MainApp.java
┃ ┣ ProductListView.fxml
┃ ┣ CartView.fxml
┃ ┣ PaymentView.fxml
┃ ┣ OrderHistoryView.fxml
┃ ┗ ReviewView.fxml
┣ application.properties // App-wide config settings
┣ pom.xml // Maven build file
┣ OnlineStoreSystemApplication.java // App entry point (main app class)

Data Access Object (DAO): ProductRepository, OrderRepository, PaymentRepository, ReviewRepository

A DAO is a Java class or interface whose only job is to communicate with the database:

- save data
- get data
- update data
- delete data

You use it so that your business logic doesn't contain SQL code.

Now, with Spring Boot + JPA — You Don’t Write DAO Code Yourself
Spring gives you a magic shortcut:

You just create an interface that extends JpaRepository,
and Spring writes all the SQL code for you automatically.